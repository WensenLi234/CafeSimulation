CafeSimulation class:
   - Imports:
       - The Hashtable class for key-value pairs in arrays.
   - Variables:
       - private int difficulty, which will be used to determine how hard the game will be.
       - private int workers that represents the number of workers in the cafe.
       - private double wage that represents how much money is deducted from bank per worker when the player opens the cafe
       - private double bank, which will be how much money your cafe has.
       - private double rent, which will be how much money is deducted from your bank each time you
       open the store.
       - private final String[] availablePositions set to an array of strings representing a position a worker can take.
       - private final String[] availableProducts set to an array of strings representing the names of products that
       are available in the cafe simulation.
       - private final Double[] availablePrices set to an array of numbers representing the price of its corresponding
       index in availableProducts.
       - private Hashtable products that uses a Hashtable to generate a dictionary of the amount of each product the cafe
       will have.
       - private Hashtable prices that uses a Hashtable to generate a dictionary with the name of a product as a key and
       the price of the product as its value.
       - private Hashtable stockPrices that uses a Hashtable to generate a dictionary with the name of each product
       available in the game as the key and the corresponding price as the value.
   - Methods:
       - A CafeSimulation constructor that takes in a parameter 'difficulty', which sets the instance's 'difficulty' to
       the argument of 'difficulty', bank to 100 / (1 + difficulty / 10.0), rent to 10, and adds 5 * (3 / difficulty) to
       each product in products.
       - An openStore method that does various calculations to serve as the main gameplay loop. Products will be sold
       randomly, the rent will be deducted from the bank, and then multiplied.
       - A void addProduct method that will take in a String 'product' and int 'amount' to look for the key in products
       named the literal of 'product' and add 'amount' to its value.
       - A void setPrice method that will take in a String 'product' and double 'amount' to set the value of
       key 'product' in products to 'amount'.
       - A void addWorker method that will take in an int 'amount' to add 'amount' to workers.
       - A double getWage method that returns the value of wage.
       - A double getBank method that will return the value of bank.
       - A double getRent method that will return the value of rent.
       - A Hashtable getProducts method that returns 'products'.
       - A Hashtable getPrices method that returns 'prices'.
       - A Hashtable getStockPrices method that returns 'stockPrices'.
       - A Hashtable getWorkers method that returns 'workers'.
CafeSimulationRunner class:
   - Imports:
       - The Scanner class for user input.
   - Algorithm:
       - Prompt the user for a difficulty from 1 to 3
       - Construct a new instance of CafeSimulation called 'cafeSimulation' with the user input as the argument to the 'difficulty' parameter.
       - Loop through the following until the output of the getBank method in cafeSimulation is below or equal to 0:
            - Display the output of the getProducts method, and getBank method, and getWorker method,
            then Loop through the following until the Open store option
                - Prompt the player to input an integer corresponding to the following actions:
                    - (1) Buy products
                    - (2) Open store
                    - (3) Manage workers
                - If the user input is 1, then prompt the player to name a product in stock, and the quantity of the product,
                then call the addProduct method and deduct the quantity.
                - If the user input is 2, then call the openStore method.
                - If the user input is 3, then display the number of workers at the cafe and their daily wage, then
                prompt the player to input an integer corresponding to the following actions:
                    - (1) Hire a worker
                    - (2) Fire a worker
                - Prompt the player whether to hire (+) or fire(-), and how much to hire/fire, then call the changeWorker method with the amount as
                'value'.
       - Once the loop ends, the program will print "Your cafe is bankrupt! Your cafe will be out of business."